// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: video.proto

package video_grpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VideoService_Videos_FullMethodName          = "/video.VideoService/Videos"
	VideoService_VideosByUserID_FullMethodName  = "/video.VideoService/VideosByUserID"
	VideoService_Video_FullMethodName           = "/video.VideoService/Video"
	VideoService_UploadVideo_FullMethodName     = "/video.VideoService/UploadVideo"
	VideoService_UploadThumbnail_FullMethodName = "/video.VideoService/UploadThumbnail"
)

// VideoServiceClient is the client API for VideoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoServiceClient interface {
	Videos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VideosResponse, error)
	VideosByUserID(ctx context.Context, in *VideoUserID, opts ...grpc.CallOption) (*VideosResponse, error)
	Video(ctx context.Context, in *VideoID, opts ...grpc.CallOption) (*VideoPayload, error)
	UploadVideo(ctx context.Context, opts ...grpc.CallOption) (VideoService_UploadVideoClient, error)
	UploadThumbnail(ctx context.Context, opts ...grpc.CallOption) (VideoService_UploadThumbnailClient, error)
}

type videoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoServiceClient(cc grpc.ClientConnInterface) VideoServiceClient {
	return &videoServiceClient{cc}
}

func (c *videoServiceClient) Videos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VideosResponse, error) {
	out := new(VideosResponse)
	err := c.cc.Invoke(ctx, VideoService_Videos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) VideosByUserID(ctx context.Context, in *VideoUserID, opts ...grpc.CallOption) (*VideosResponse, error) {
	out := new(VideosResponse)
	err := c.cc.Invoke(ctx, VideoService_VideosByUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) Video(ctx context.Context, in *VideoID, opts ...grpc.CallOption) (*VideoPayload, error) {
	out := new(VideoPayload)
	err := c.cc.Invoke(ctx, VideoService_Video_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) UploadVideo(ctx context.Context, opts ...grpc.CallOption) (VideoService_UploadVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoService_ServiceDesc.Streams[0], VideoService_UploadVideo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &videoServiceUploadVideoClient{stream}
	return x, nil
}

type VideoService_UploadVideoClient interface {
	Send(*UploadVideoInput) error
	CloseAndRecv() (*VideoPayload, error)
	grpc.ClientStream
}

type videoServiceUploadVideoClient struct {
	grpc.ClientStream
}

func (x *videoServiceUploadVideoClient) Send(m *UploadVideoInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoServiceUploadVideoClient) CloseAndRecv() (*VideoPayload, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(VideoPayload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *videoServiceClient) UploadThumbnail(ctx context.Context, opts ...grpc.CallOption) (VideoService_UploadThumbnailClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoService_ServiceDesc.Streams[1], VideoService_UploadThumbnail_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &videoServiceUploadThumbnailClient{stream}
	return x, nil
}

type VideoService_UploadThumbnailClient interface {
	Send(*UploadThumbnailInput) error
	CloseAndRecv() (*UploadThumbnailPayload, error)
	grpc.ClientStream
}

type videoServiceUploadThumbnailClient struct {
	grpc.ClientStream
}

func (x *videoServiceUploadThumbnailClient) Send(m *UploadThumbnailInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoServiceUploadThumbnailClient) CloseAndRecv() (*UploadThumbnailPayload, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadThumbnailPayload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoServiceServer is the server API for VideoService service.
// All implementations must embed UnimplementedVideoServiceServer
// for forward compatibility
type VideoServiceServer interface {
	Videos(context.Context, *empty.Empty) (*VideosResponse, error)
	VideosByUserID(context.Context, *VideoUserID) (*VideosResponse, error)
	Video(context.Context, *VideoID) (*VideoPayload, error)
	UploadVideo(VideoService_UploadVideoServer) error
	UploadThumbnail(VideoService_UploadThumbnailServer) error
	mustEmbedUnimplementedVideoServiceServer()
}

// UnimplementedVideoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServiceServer struct {
}

func (UnimplementedVideoServiceServer) Videos(context.Context, *empty.Empty) (*VideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Videos not implemented")
}
func (UnimplementedVideoServiceServer) VideosByUserID(context.Context, *VideoUserID) (*VideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideosByUserID not implemented")
}
func (UnimplementedVideoServiceServer) Video(context.Context, *VideoID) (*VideoPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Video not implemented")
}
func (UnimplementedVideoServiceServer) UploadVideo(VideoService_UploadVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadVideo not implemented")
}
func (UnimplementedVideoServiceServer) UploadThumbnail(VideoService_UploadThumbnailServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadThumbnail not implemented")
}
func (UnimplementedVideoServiceServer) mustEmbedUnimplementedVideoServiceServer() {}

// UnsafeVideoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServiceServer will
// result in compilation errors.
type UnsafeVideoServiceServer interface {
	mustEmbedUnimplementedVideoServiceServer()
}

func RegisterVideoServiceServer(s grpc.ServiceRegistrar, srv VideoServiceServer) {
	s.RegisterService(&VideoService_ServiceDesc, srv)
}

func _VideoService_Videos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).Videos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_Videos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).Videos(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_VideosByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).VideosByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_VideosByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).VideosByUserID(ctx, req.(*VideoUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_Video_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).Video(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoService_Video_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).Video(ctx, req.(*VideoID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_UploadVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoServiceServer).UploadVideo(&videoServiceUploadVideoServer{stream})
}

type VideoService_UploadVideoServer interface {
	SendAndClose(*VideoPayload) error
	Recv() (*UploadVideoInput, error)
	grpc.ServerStream
}

type videoServiceUploadVideoServer struct {
	grpc.ServerStream
}

func (x *videoServiceUploadVideoServer) SendAndClose(m *VideoPayload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoServiceUploadVideoServer) Recv() (*UploadVideoInput, error) {
	m := new(UploadVideoInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VideoService_UploadThumbnail_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoServiceServer).UploadThumbnail(&videoServiceUploadThumbnailServer{stream})
}

type VideoService_UploadThumbnailServer interface {
	SendAndClose(*UploadThumbnailPayload) error
	Recv() (*UploadThumbnailInput, error)
	grpc.ServerStream
}

type videoServiceUploadThumbnailServer struct {
	grpc.ServerStream
}

func (x *videoServiceUploadThumbnailServer) SendAndClose(m *UploadThumbnailPayload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoServiceUploadThumbnailServer) Recv() (*UploadThumbnailInput, error) {
	m := new(UploadThumbnailInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoService_ServiceDesc is the grpc.ServiceDesc for VideoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.VideoService",
	HandlerType: (*VideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Videos",
			Handler:    _VideoService_Videos_Handler,
		},
		{
			MethodName: "VideosByUserID",
			Handler:    _VideoService_VideosByUserID_Handler,
		},
		{
			MethodName: "Video",
			Handler:    _VideoService_Video_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadVideo",
			Handler:       _VideoService_UploadVideo_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadThumbnail",
			Handler:       _VideoService_UploadThumbnail_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "video.proto",
}
